@use 'colors' as *;

// Get color from the $colors map with optional variant
@function get-color($color-name, $variant: 'DEFAULT') {
	@if map-has-key($colors, $color-name) {
		$color: map-get($colors, $color-name);

		@if type-of($color)=='map' {
			@if map-has-key($color, $variant) {
				@return map-get($color, $variant);
			}

			@error "Variant '#{$variant}' not found in color '#{$color-name}'.";
		}

		@return $color;
	}

	@error "Color '#{$color-name}' not found in $colors map.";
}

// Get breakpoint from the $breakpoints map
@function breakpoint($breakpoint-name) {
	@if map-has-key($breakpoints, $breakpoint-name) {
		@return map-get($breakpoints, $breakpoint-name);
	}

	@error "Breakpoint '#{$breakpoint-name}' not found in $breakpoints map.";
}

// Convert px to rem
@function rem($pixels, $context: 16) {
	@return ($pixels / $context) * 1rem;
}

// Convert px to em
@function em($pixels, $context: 16) {
	@return ($pixels / $context) * 1em;
}

// Get z-index value from a list of elements
$z-indexes: (
	'modal': 9000,
	'overlay': 8000,
	'dropdown': 7000,
	'header': 6000,
	'footer': 5000
);

@function z($layer) {
	@if map-has-key($z-indexes, $layer) {
		@return map-get($z-indexes, $layer);
	}

	@error "Z-index '#{$layer}' not found in $z-indexes map.";
}

@function lighten-color($color-name, $amount) {
	@return lighten(get-color($color-name), $amount);
}

@function darken-color($color-name, $amount) {
	@return darken(get-color($color-name), $amount);
}

// Add opacity to a color
@function color-opacity($color-name, $opacity, $variant: 'DEFAULT') {
	$color: get-color($color-name, $variant);
	@return rgba($color, $opacity);
}
